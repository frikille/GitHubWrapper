/*! GitHubWrapper VERSION: 0.2.0.7 | github.com/frikille/GitHubWrapper/blob/master/LICENSE !*/var GitHubWrapper=function(){var e,r,s,t={},i={githubDomain:"https://api.github.com"},o=function(){try{return new window.XMLHttpRequest}catch(e){}},a=function(e,r,s){return function(){4===this.readyState&&(this.status>=200&&300>=this.status||304===this.status?e.apply(s||this,[JSON.parse(this.responseText),this.getAllResponseHeaders(),this.status]):r.apply(s||this,[JSON.parse(this.responseText),this.getAllResponseHeaders(),this.status]))}},u=function(){},n=function(e){var r,s=[];for(r in e)e.hasOwnProperty(r)&&s.push(r+"="+e[r]);return 0==s.length?"":"?"+s.join("&")};return t.init=function(t){e="BASIC"==t.authType||"OAUTH"==t.authType?t.authType:"NONE","OAUTH"==e&&(r=t.accessToken),"BASIC"==e&&(s=getEncodedUserNameAndPassword(t.username,t.password))},t.getEncodedUserNameAndPassword=function(e,r){return Base64.encode(e+":"+r)},t.callApi=function(t){var p=o(),t=t||{},l=t.method||"GET",m=t.auth||null,c=t.url||i.githubDomain+t.apiUrl,d=t.success||u,h=t.failure||u,f=t.callbackScope,b=t.params||{};if("GET"==l&&(c+=n(b)),p.open(l,c),m&&"NONE"==e)throw Error("The method ["+c+"] requires authentication but no authentication credentials were set!");"OAUTH"==e&&p.setRequestHeader("Authorization","token "+r),"BASIC"==e&&p.setRequestHeader("Authorization","Basic "+s),p.onreadystatechange=a(d,h,f),"GET"!=l?p.send(JSON.stringify(b)):p.send()},t.checkAuthParams=function(e){var r=e.authType||"OAUTH";if("OAUTH"==r){if(void 0===e.accessToken)return!1}else if(void 0===e.username||void 0===e.password)return!1;return!0},t}();(function(e){var r={},s={listNotifications:"/notifications",markAsRead:"/notifications"},t={listNotifications:"GET",markAsRead:"PUT"};r.getUserNotifications=function(e){var e=e||{};1==e.auth,e.method=t.listNotifications,e.apiUrl=s.listNotifications,GitHubWrapper.callApi(e)},r.markNotificationAsRead=function(e){var e=e||{};1==e.auth,e.method=t.markAsRead,e.apiUrl=s.markAsRead,GitHubWrapper.callApi(e)},e.Activity=r})(window.GitHubWrapper||(window.GitHubWrapper={})),function(e,r){var s={},t={listUserAllIssues:"/issues",listUserIssuesOfOwnedAndMemberRepositories:"/user/issues/",listIssuesForRepository:"/repos/{0}/{1}/issues",getIssue:"/repos/{0}/{1}/issues/{2}",createIssue:"/repos/{0}/{1}/issues",editIssue:"/repos/{0}/{1}/issues/{2}",listAssignees:"/repos/{0}/{1}/assignees",listCommentsOnIssue:"/repos/{0}/{1}/issues/{2}/comments",getComment:"/repos/{0}/{1}/issues/comments/{2}",createComment:"/repos/{0}/{1}/issues/{2}/comments",editComment:"/repos/{0}/{1}/issues/comments/{2}",deleteComment:"/repos/{0}/{1}/issues/comments/{2}",listLabels:"/repos/{0}/{1}/labels",createLabel:"/repos/{0}/{1}/labels/",listLabelsOnIssue:"/repos/{0}/{1}/issues/{2}/labels",addLabelToIssue:"/repos/{0}/{1}/issues/{2}/labels",removeLabelFromIssue:"/repos/{0}/{1}/issues/{2}/labels/:name",replaceLabelsOnIssue:"/repos/{0}/{1}/issues/{2}/labels",listMilestones:"/repos/{0}/{1}/milestones",getMilestone:"/repos/{0}/{1}/milestones/{2}",createMilestone:"/repos/{0}/{1}/milestones",updateMilestone:"/repos/{0}/{1}/milestones/{2}"},i={listUserAllIssues:"GET",listUserIssuesOfOwnedAndMemberRepositories:"GET",listIssuesForRepository:"GET",getIssue:"GET",createIssue:"POST",editIssue:"PATCH",listAssignees:"GET",listCommentsOnIssue:"GET",getComment:"GET",createComment:"POST",editComment:"PATCH",deleteComment:"DELETE",listLabels:"GET",createLabel:"POST",listLabelsOnIssue:"GET",addLabelToIssue:"POST",removeLabelFromIssue:"DELETE",replaceLabelsOnIssue:"PUT",listMilestones:"GET",getMilestone:"GET",createMilestone:"POST",updateMilestone:"PATCH"};s.listUserAllIssues=function(e){var e=e||{};1==e.auth,e.method=i.listUserAllIssues,e.apiUrl=t.listUserAllIssues,GitHubWrapper.callApi(e)},s.listUserIssuesOfOwnedAndMemberRepositories=function(e){var e=e||{};1==e.auth,e.method=i.listUserIssuesOfOwnedAndMemberRepositories,e.apiUrl=t.listUserIssuesOfOwnedAndMemberRepositories,GitHubWrapper.callApi(e)},s.listIssuesForRepository=function(e){var e=e||{},s=option.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.listIssuesForRepository,e.apiUrl=t.listIssuesForRepository.format(s,o),GitHubWrapper.callApi(e)},s.getIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.getIssue,e.apiUrl=t.getIssue.format(s,o,a),GitHubWrapper.callApi(e)},s.createIssue=function(e){var e=e||{},s=e.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.createIssue,e.apiUrl=t.createIssue.format(s,o),GitHubWrapper.callApi(e)},s.editIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.editIssue,e.apiUrl=t.editIssue.format(s,o,a),GitHubWrapper.callApi(e)},s.listAssignees=function(e){var e=e||{},s=e.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.listAssignees,e.apiUrl=t.listAssignees.format(s,o),GitHubWrapper.callApi(e)},s.listCommentsOnIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.listCommentsOnIssue,e.apiUrl=t.listCommentsOnIssue.format(s,o),GitHubWrapper.callApi(e)},s.getComment=function(e){var e=e||{},s=e.user,o=e.repo,a=e.commentId;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, commentId]");e.method=i.getComment,e.apiUrl=t.getComment.format(s,o,a),GitHubWrapper.callApi(e)},s.createComment=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.createComment,e.apiUrl=t.createComment.format(s,o,a),GitHubWrapper.callApi(e)},s.editComment=function(e){var e=e||{},s=e.user,o=e.repo,a=e.commentId;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, commentId]");e.method=i.editComment,e.apiUrl=t.editComment.format(s,o),GitHubWrapper.callApi(e)},s.deleteComment=function(e){var e=e||{},s=e.user,o=e.repo,a=e.commentId;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, commentId]");e.method=i.deleteComment,e.apiUrl=t.deleteComment.format(s,o),GitHubWrapper.callApi(e)},s.listLabels=function(e){var e=e||{},s=e.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.listLabels,e.apiUrl=t.listLabels.format(s,o),GitHubWrapper.callApi(e)},s.createLabel=function(e){var e=e||{},s=e.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.createLabel,e.apiUrl=t.createLabel.format(s,o),GitHubWrapper.callApi(e)},s.listLabelsOnIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.listLabelsOnIssue,e.apiUrl=t.listLabelsOnIssue.format(s,o,a),GitHubWrapper.callApi(e)},s.addLabelToIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.addLabelToIssue,e.apiUrl=t.addLabelToIssue.format(s,o,a),GitHubWrapper.callApi(e)},s.removeLabelFromIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.removeLabelFromIssue,e.apiUrl=t.removeLabelFromIssue.format(s,o,a),GitHubWrapper.callApi(e)},s.replaceLabelsOnIssue=function(e){var e=e||{},s=e.user,o=e.repo,a=e.issueNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, issueNumber]");e.method=i.replaceLabelsOnIssue,e.apiUrl=t.replaceLabelsOnIssue.format(s,o,a),GitHubWrapper.callApi(e)},s.listMilestones=function(e){var e=e||{},s=e.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.listMilestones,e.apiUrl=t.listMilestones.format(s,o),GitHubWrapper.callApi(e)},s.getMilestone=function(e){var e=e||{},s=e.user,o=e.repo,a=e.milestoneNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, milestoneNumber]");e.method=i.getMilestone,e.apiUrl=t.getMilestone.format(s,o,a),GitHubWrapper.callApi(e)},s.createMilestone=function(e){var e=e||{},s=e.user,o=e.repo;if(s===r||o===r)throw Error("required but missing parameters: [user, repo]");e.method=i.createMilestone,e.apiUrl=t.createMilestone.format(s,o),GitHubWrapper.callApi(e)},s.updateMilestone=function(e){var e=e||{},s=e.user,o=e.repo,a=e.milestoneNumber;if(s===r||o===r||a===r)throw Error("required but missing parameters: [user, repo, milestoneNumber]");e.method=i.updateMilestone,e.apiUrl=t.updateMilestone.format(s,o,a),GitHubWrapper.callApi(e)},e.Issues=s}(window.GitHubWrapper||(window.GitHubWrapper={})),function(e,r){var s={},t={ownRepositories:"/user/repos",getRepository:"/repos/{0}/{1}",listContributors:"/repos/{0}/{1}/contributors",listTags:"/repos/{0}/{1}/tags",listBranches:"/repos/{0}/{1}/branches"},i={ownRepositories:"GET",getRepository:"GET",listContributors:"GET",listTags:"GET",listBranches:"GET"};s.getUserRepositories=function(e){var e=e||{};1==e.auth,e.method=i.ownRepositories,e.apiUrl=t.ownRepositories,GitHubWrapper.callApi(e)},s.getRepository=function(e){var e=e||{},s=e.user,o=e.repo;if(o===r||s===r)throw Error("This method requires user and repo, but no user and/or repo in the options.");e.method=i.getRepository,e.apiUrl=t.getRepository.format(s,o),GitHubWrapper.callApi(e)},s.listRepositoryContributors=function(e){var e=e||{},s=e.user,t=e.repo;if(t===r||s===r)throw Error("This method requires user and repo, but no user and/or repo in the options.");e.method=i.listContributors.format(s,t),GitHubWrapper.callApi(e)},s.listRepositoryTags=function(e){var e=e||{},s=e.user,t=e.repo;if(t===r||s===r)throw Error("This method requires user and repo, but no user and/or repo in the options.");e.method=i.listTags.format(s,t),GitHubWrapper.callApi(e)},s.listRepositoryBranches=function(e){var e=e||{},s=e.user,o=e.repo;if(o===r||s===r)throw Error("This method requires user and repo, but no user and/or repo in the options.");e.method=i.listBranches,e.apiUrl=t.listBranches.format(s,o),GitHubWrapper.callApi(e)},e.Repositories=s}(window.GitHubWrapper||(window.GitHubWrapper={})),function(e){var r={},s={getSingleUser:"/users/:user",getAuthenticatedUser:"/user",updateAuthenticatedUser:"/user"},t={getSingleUser:"GET",getAuthenticatedUser:"GET",updateAuthenticatedUser:"PATCH"};r.getAuthenticatedUserData=function(e){var e=e||{};1==e.auth,e.method=t.getAuthenticatedUser,e.apiUrl=s.getAuthenticatedUser,GitHubWrapper.callApi(e)},r.updateAuthenticatedUser=function(e){var e=e||{};1==e.auth,e.method=t.updateAuthenticatedUser,e.apiUrl=s.updateAuthenticatedUser,GitHubWrapper.callApi(e)},e.Users=r}(window.GitHubWrapper||(window.GitHubWrapper={})),Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",decode:function(e){var r,s,t,i,o,a,u,n="",p=0;for(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");e.length>p;)i=this._keyStr.indexOf(e.charAt(p++)),o=this._keyStr.indexOf(e.charAt(p++)),a=this._keyStr.indexOf(e.charAt(p++)),u=this._keyStr.indexOf(e.charAt(p++)),r=i<<2|o>>4,s=(15&o)<<4|a>>2,t=(3&a)<<6|u,n+=String.fromCharCode(r),64!=a&&(n+=String.fromCharCode(s)),64!=u&&(n+=String.fromCharCode(t));return n=Base64._utf8_decode(n)},encode:function(e){var r,s,t,i,o,a,u,n="",p=0;for(e=Base64._utf8_encode(e);e.length>p;)r=e.charCodeAt(p++),s=e.charCodeAt(p++),t=e.charCodeAt(p++),i=r>>2,o=(3&r)<<4|s>>4,a=(15&s)<<2|t>>6,u=63&t,isNaN(s)?a=u=64:isNaN(t)&&(u=64),n=n+this._keyStr.charAt(i)+this._keyStr.charAt(o)+this._keyStr.charAt(a)+this._keyStr.charAt(u);return n},_utf8_decode:function(e){for(var r="",s=0,t=c1=c2=0;e.length>s;)t=e.charCodeAt(s),128>t?(r+=String.fromCharCode(t),s++):t>191&&224>t?(c2=e.charCodeAt(s+1),r+=String.fromCharCode((31&t)<<6|63&c2),s+=2):(c2=e.charCodeAt(s+1),c3=e.charCodeAt(s+2),r+=String.fromCharCode((15&t)<<12|(63&c2)<<6|63&c3),s+=3);return r},_utf8_encode:function(e){e=e.replace(/\r\n/g,"\n");for(var r="",s=0;e.length>s;s++){var t=e.charCodeAt(s);128>t?r+=String.fromCharCode(t):t>127&&2048>t?(r+=String.fromCharCode(192|t>>6),r+=String.fromCharCode(128|63&t)):(r+=String.fromCharCode(224|t>>12),r+=String.fromCharCode(128|63&t>>6),r+=String.fromCharCode(128|63&t))}return r}},String.prototype.format=function(){var e=this,r=arguments;return e.replace(String.prototype.format.regex,function(e){var s,t=parseInt(e.substring(1,e.length-1));return s=t>=0?r[t]:-1===t?"{":-2===t?"}":""})},String.prototype.format.regex=RegExp("{-?[0-9]+}","g");